class TrieNode {
public:
    TrieNode* children[26];
    bool isEndOfWord;

    TrieNode() {
        isEndOfWord = false;
        for (int i = 0; i < 26; i++) {
            children[i] = nullptr;
        }
    }
};

class Solution {
    TrieNode* root;
    vector<string> result;
    vector<vector<bool>> visited;
    string currentWord;

public:
    Solution() {
        root = new TrieNode();
    }

    void insert(string word) {
        TrieNode* node = root;
        for (char c : word) {
            int index = c - 'a';
            if (node->children[index] == nullptr) {
                node->children[index] = new TrieNode();
            }
            node = node->children[index];
        }
        node->isEndOfWord = true;
    }

    void dfs(vector<vector<char>>& board, int i, int j, TrieNode* node) {
        if (i < 0 || i >= board.size() || j < 0 || j >= board[0].size() || visited[i][j]) return;

        char c = board[i][j];
        if (node->children[c - 'a'] == nullptr) return;

        visited[i][j] = true;
        currentWord.push_back(c);
        node = node->children[c - 'a'];

        if (node->isEndOfWord) {
            result.push_back(currentWord);
            node->isEndOfWord = false;  // Mark as used
        }

        dfs(board, i + 1, j, node);
        dfs(board, i - 1, j, node);
        dfs(board, i, j + 1, node);
        dfs(board, i, j - 1, node);

        visited[i][j] = false;
        currentWord.pop_back();
    }

    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {
        for (const string& word : words) {
            insert(word);
        }

        int rows = board.size(), cols = board[0].size();
        visited.assign(rows, vector<bool>(cols, false));

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                dfs(board, i, j, root);
            }
        }

        return result;
    }
};
